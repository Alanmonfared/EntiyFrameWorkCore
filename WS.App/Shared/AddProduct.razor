<EditForm Model="@product" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container d-flex justify-content-center align-content-center">
        <div class="mt-5 col-lg-7 col-md-5  shadow">
            <div class=" mx-5 mb-5 mt-5">
                <!-- Name input -->
                <div class="form-outline mb-4">
                    <label class="form-label" for="name">Name</label>
                    <br />
                    <InputText id="name" class="col-lg-10" @bind-Value="product.Name" DisplayName="Product Name" />
                    <ValidationMessage For="@(() => product.Name)" />
                </div>

                <!--  ShortDescription input -->
                <div class="form-outline mb-4">
                    <label class="form-label" for="ShortDescription">Short Description</label>
                    <InputTextArea id="ShortDescription" class="col-lg-10" @bind-Value="product.ShortDescription" />
                    <ValidationMessage class="text-warning" For="@(() => product.ShortDescription)" />
                </div>

                <!-- LongDescription input -->
                <div class="form-outline mb-4">
                    <label class="form-label" for="LongDescription">Long Description</label>
                    <InputTextArea id="LongDescription" class="col-lg-10" @bind-Value="product.LongDescription" />
                    <ValidationMessage For="@(() => product.LongDescription)" />
                </div>




                <!-- price input -->
                <div class="form-outline mb-4 mt-5 d-flex justify-content-between">

                    <label>

                        <img id="imageId" src="@product.Img" />

                        <InputFile OnChange="@OnInputFileChanged" @bind-Value="product.Img" multiple />

                    </label>

                    <!-- price input -->
                    <label class="form-label mt-5" for="price">
                        Price
                        <InputNumber @bind-Value="product.Price" />
                    </label>

                </div>
                <!-- option input -->
                <div>


                    <InputSelect id="category" typeof="text" @bind-Value="product.CategoryId" class="form-select">
                        <option value="0">Select Prodcut</option>
                        @foreach (var option in categories)
                        {
                            <option value="@option.Id">@option.Name</option>
                        }
                    </InputSelect>

                </div>


                <!-- Submit button -->
                <div>
                    <button type="submit" class="btn btn-black btn-block mb-4 col-lg-1 hov ">Add</button>
                </div>


            </div>
        </div>
    </div>
</EditForm>

@code {

    private List<Category> categories = new();

    private async Task GetCategoriesAsync()
    {
        categories = await Http.GetFromJsonAsync<List<Category>>("https://localhost:44356/api/categories" );

    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategoriesAsync();
    }





    private Product product = new();
    private Category categoryproduct = new();

    [Parameter]
    public Product CategoryItems { get; set; }


    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {

        var files = inputFileChangeEvent.GetMultipleFiles();

        foreach (var file in files)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            product.Img = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
        }


    }









    private async Task HandleValidSubmit()
    {
        await Http.PostAsJsonAsync("https://localhost:44356/api/Products", product);
        product = new();

        StateHasChanged();
    }


}
